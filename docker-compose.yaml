version: '3.8'
services:

#  dynamodb-local:
#    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
#    image: "amazon/dynamodb-local:latest"
#    container_name: dynamodb-local
#    ports:
#      - "8000:8000"
#    volumes:
#      - "./docker/dynamodb:/home/dynamodblocal/data"
#    working_dir: /home/dynamodblocal

#  dynamodb-init:
#    depends_on:
#      - dynamodb-local
#    image: amazon/aws-cli
#    restart: on-failure
#    environment:
#      AWS_ACCESS_KEY_ID: Aksdjaksdhueiadqwert
#      AWS_SECRET_ACCESS_KEY: dshdajksdhajskdhasjkdhasjkdashkjqwertyui
#    command: >-
#      dynamodb create-table
#          --table-name PontosQR
#          --attribute-definitions
#              AttributeName=pontoId,AttributeType=S
#          --key-schema
#              AttributeName=pontoId,KeyType=HASH
#          --billing-mode PAY_PER_REQUEST
#          --endpoint-url http://dynamodb-local:8000 --region us-west-1

  ##### RabbitMQdocker pull rabbitmq:management-alpine
  rabbitmq:
    image: rabbitmq:management-alpine # Usa a imagem do RabbitMQ com o plugin de gerenciamento habilitado
    ports:
      - "5672:5672" # Porta padr√£o do RabbitMQ
      - "15672:15672" # Porta da interface de gerenciamento do RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "password"
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '-rabbitmq_management path_prefix "/rabbitmanagement"'
      RABBITMQ_DEFAULT_VHOST: "/rabbit"
    healthcheck:
      test: rabbitmq-diagnostics -q check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10

  ##### Auth #####
  api-auth:
    build:
      context: ./Auth
      args:
        - BUILD_CONFIGURATION=Debug
      dockerfile: Dockerfile
    image: hackathon-soat1-grp13-auth:latest
    restart: on-failure
    ports:
      - "5270:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionString=User ID=fiap;Password=SenhaLocalAuth;Host=postgres-db-auth;Port=5432;Database=hackathonAuth;Pooling=true;
    depends_on:
      postgres-db-auth:
        condition: service_healthy

  postgres-db-auth:
    hostname: postgres-compose
    image: postgres
    environment:
      POSTGRES_PASSWORD: "SenhaLocalAuth"
      POSTGRES_USER: fiap
      POSTGRES_DB: hackathonAuth
    ports:
      - "15436:5432"
    volumes:
      - hackathon-soat1-grp13-db-data-auth:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

##### Ponto #####
  api-ponto:
    build:
      context: ./Ponto
      args:
        - BUILD_CONFIGURATION=Debug
      dockerfile: Dockerfile
    image: hackathon-soat1-grp13-ponto:latest
    restart: on-failure
    ports:
      - "5271:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionString=User ID=fiap;Password=SenhaLocalPonto;Host=postgres-db-ponto;Port=5432;Database=hackathonponto;Pooling=true;
      - Rabbit_Hostname=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db-ponto:
        condition: service_healthy

  postgres-db-ponto:
    hostname: postgres-compose
    image: postgres
    environment:
      POSTGRES_PASSWORD: "SenhaLocalPonto"
      POSTGRES_USER: fiap
      POSTGRES_DB: hackathonponto
    ports:
      - "15437:5432"
    volumes:
      - hackathon-soat1-grp13-db-data-ponto:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

##### Relatorio #####
  api-relatorio:
    build:
      context: ./Relatorio
      args:
        - BUILD_CONFIGURATION=Debug
      dockerfile: Dockerfile
    image: hackathon-soat1-grp13-relatorio:latest
    restart: on-failure
    ports:
      - "5272:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionString=User ID=fiap;Password=SenhaLocalRelatorio;Host=postgres-db-relatorio;Port=5432;Database=hackathonrelatorio;Pooling=true;
      - Rabbit_Hostname=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db-relatorio:
        condition: service_healthy

  postgres-db-relatorio:
    hostname: postgres-compose
    image: postgres
    environment:
      POSTGRES_PASSWORD: "SenhaLocalRelatorio"
      POSTGRES_USER: fiap
      POSTGRES_DB: hackathonrelatorio
    ports:
      - "15438:5432"
    volumes:
      - hackathon-soat1-grp13-db-data-relatorio:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

volumes:
  hackathon-soat1-grp13-db-data-auth:
  hackathon-soat1-grp13-db-data-ponto:
  hackathon-soat1-grp13-db-data-relatorio: